name: Reliable MLflow Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'session-4/demo5-end-to-end-pipeline/**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: false
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  validate-setup:
    name: Validate Setup
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install core dependencies
      timeout-minutes: 5
      run: |
        pip install --upgrade pip
        pip install mlflow==2.12.1 scikit-learn==1.3.2 pandas==2.1.4 numpy==1.24.4
        
    - name: Validate imports
      run: |
        python -c "
        import mlflow
        import sklearn
        import pandas as pd
        import numpy as np
        print('âœ… All imports successful')
        "
        
    - name: Set environment
      id: env
      run: |
        if [ "${{ github.event.inputs.environment }}" != "" ]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "environment=production" >> $GITHUB_OUTPUT
        else
          echo "environment=development" >> $GITHUB_OUTPUT
        fi

  run-pipeline:
    name: Execute Pipeline
    runs-on: ubuntu-latest
    needs: validate-setup
    timeout-minutes: 20
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      timeout-minutes: 5
      run: |
        cd session-4/demo5-end-to-end-pipeline
        pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run pipeline test
      timeout-minutes: 10
      env:
        MLFLOW_TRACKING_URI: file:./mlruns
        N_SAMPLES: 500
        MIN_ACCURACY_THRESHOLD: 0.75
      run: |
        cd session-4/demo5-end-to-end-pipeline
        python test_pipeline.py
        
    - name: Run full pipeline
      if: github.ref == 'refs/heads/main'
      timeout-minutes: 15
      env:
        MLFLOW_TRACKING_URI: file:./mlruns
        N_SAMPLES: 2000
        MIN_ACCURACY_THRESHOLD: 0.85
      run: |
        cd session-4/demo5-end-to-end-pipeline
        python pipeline.py
        
    - name: Upload artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: pipeline-results
        path: |
          session-4/demo5-end-to-end-pipeline/pipeline_artifacts/
          session-4/demo5-end-to-end-pipeline/mlruns/
        retention-days: 7
        
    - name: Summary
      if: always()
      run: |
        echo "## ðŸš€ Pipeline Execution Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ needs.validate-setup.outputs.environment || 'development' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Git SHA**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY